// $ANTLR 2.7.4: "e.g" -> "EParser.java"$

public interface ETokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int QUASIOPEN = 4;
	int QUASICLOSE = 5;
	int QUASIBODY = 6;
	int QuasiContent = 7;
	int RCURLY = 8;
	int QIDENT = 9;
	int HEX = 10;
	int OCTAL = 11;
	int LITERAL_bind = 12;
	int LITERAL_break = 13;
	int LITERAL_catch = 14;
	int LITERAL_continue = 15;
	int LITERAL_def = 16;
	int LITERAL_else = 17;
	int LITERAL_escape = 18;
	int LITERAL_extends = 19;
	int LITERAL_finally = 20;
	int LITERAL_for = 21;
	int LITERAL_guards = 22;
	int LITERAL_if = 23;
	int LITERAL_implements = 24;
	int LITERAL_in = 25;
	int LITERAL_interface = 26;
	int LITERAL_match = 27;
	int LITERAL_meta = 28;
	int LITERAL_method = 29;
	int LITERAL_pragma = 30;
	int LITERAL_return = 31;
	int LITERAL_switch = 32;
	int LITERAL_thunk = 33;
	int LITERAL_to = 34;
	int LITERAL_try = 35;
	int LITERAL_var = 36;
	int LITERAL_when = 37;
	int LITERAL_while = 38;
	int LITERAL__ = 39;
	int LITERAL_accum = 40;
	int LITERAL_delegate = 41;
	int LITERAL_module = 42;
	int LITERAL_on = 43;
	int LITERAL_select = 44;
	int LITERAL_throws = 45;
	int LITERAL_abstract = 46;
	int LITERAL_an = 47;
	int LITERAL_as = 48;
	int LITERAL_assert = 49;
	int LITERAL_attribute = 50;
	int LITERAL_be = 51;
	int LITERAL_begin = 52;
	int LITERAL_behalf = 53;
	int LITERAL_belief = 54;
	int LITERAL_believe = 55;
	int LITERAL_believes = 56;
	int LITERAL_case = 57;
	int LITERAL_class = 58;
	int LITERAL_const = 59;
	int LITERAL_constructor = 60;
	int LITERAL_declare = 61;
	int LITERAL_default = 62;
	int LITERAL_define = 63;
	int LITERAL_defmacro = 64;
	int LITERAL_delicate = 65;
	int LITERAL_deprecated = 66;
	int LITERAL_dispatch = 67;
	int LITERAL_do = 68;
	int LITERAL_encapsulate = 69;
	int LITERAL_encapsulated = 70;
	int LITERAL_encapsulates = 71;
	int LITERAL_end = 72;
	int LITERAL_ensure = 73;
	int LITERAL_enum = 74;
	int LITERAL_eventual = 75;
	int LITERAL_eventually = 76;
	int LITERAL_export = 77;
	int LITERAL_facet = 78;
	int LITERAL_forall = 79;
	int LITERAL_function = 80;
	int LITERAL_given = 81;
	int LITERAL_hidden = 82;
	int LITERAL_hides = 83;
	int LITERAL_inline = 84;
	int LITERAL_is = 85;
	int LITERAL_know = 86;
	int LITERAL_knows = 87;
	int LITERAL_lambda = 88;
	int LITERAL_let = 89;
	int LITERAL_methods = 90;
	int LITERAL_namespace = 91;
	int LITERAL_native = 92;
	int LITERAL_obeys = 93;
	int LITERAL_octet = 94;
	int LITERAL_oneway = 95;
	int LITERAL_operator = 96;
	int LITERAL_package = 97;
	int LITERAL_private = 98;
	int LITERAL_protected = 99;
	int LITERAL_public = 100;
	int LITERAL_raises = 101;
	int LITERAL_reliance = 102;
	int LITERAL_reliant = 103;
	int LITERAL_relies = 104;
	int LITERAL_rely = 105;
	int LITERAL_reveal = 106;
	int LITERAL_sake = 107;
	int LITERAL_signed = 108;
	int LITERAL_static = 109;
	int LITERAL_struct = 110;
	int LITERAL_suchthat = 111;
	int LITERAL_supports = 112;
	int LITERAL_suspect = 113;
	int LITERAL_suspects = 114;
	int LITERAL_synchronized = 115;
	int LITERAL_this = 116;
	int LITERAL_transient = 117;
	int LITERAL_truncatable = 118;
	int LITERAL_typedef = 119;
	int LITERAL_unsigned = 120;
	int LITERAL_unum = 121;
	int LITERAL_uses = 122;
	int LITERAL_using = 123;
	// "utf8" = 124
	// "utf16" = 125
	int LITERAL_virtual = 126;
	int LITERAL_volatile = 127;
	int LITERAL_wstring = 128;
	int QUESTION = 129;
	int LPAREN = 130;
	int RPAREN = 131;
	int LBRACK = 132;
	int RBRACK = 133;
	int LCURLY = 134;
	int DOLLARCURLY = 135;
	int ATCURLY = 136;
	int AT = 137;
	int COLON = 138;
	int COMMA = 139;
	int DOT = 140;
	int THRU = 141;
	int TILL = 142;
	int SAME = 143;
	int LNOT = 144;
	int BNOT = 145;
	int NOTSAME = 146;
	int DIV = 147;
	int FLOORDIV = 148;
	int PLUS = 149;
	int INC = 150;
	int MINUS = 151;
	int DEC = 152;
	int STAR = 153;
	int REM = 154;
	int MOD = 155;
	int SR = 156;
	int GE = 157;
	int GT = 158;
	int SL = 159;
	int LE = 160;
	int ABA = 161;
	int LT = 162;
	int BXOR = 163;
	int BOR = 164;
	int LOR = 165;
	int BAND = 166;
	int BUTNOT = 167;
	int LAND = 168;
	int SEMI = 169;
	int POW = 170;
	int ASSIGN = 171;
	int FLOORDIV_ASSIGN = 172;
	int DIV_ASSIGN = 173;
	int PLUS_ASSIGN = 174;
	int MINUS_ASSIGN = 175;
	int STAR_ASSIGN = 176;
	int REM_ASSIGN = 177;
	int MOD_ASSIGN = 178;
	int POW_ASSIGN = 179;
	int SR_ASSIGN = 180;
	int SL_ASSIGN = 181;
	int BXOR_ASSIGN = 182;
	int BOR_ASSIGN = 183;
	int BAND_ASSIGN = 184;
	int SEND = 185;
	int WHEN = 186;
	int MAPSTO = 187;
	int MATCHBIND = 188;
	int MISMATCH = 189;
	int SCOPE = 190;
	int WS = 191;
	int EOL = 192;
	int SL_COMMENT = 193;
	int ML_COMMENT = 194;
	int CHAR_LITERAL = 195;
	int STRING_LITERAL = 196;
	int ESC = 197;
	int HEX_DIGIT = 198;
	int IDENT = 199;
	int INT = 200;
	int POSINT = 201;
	int FLOAT64 = 202;
	int EXPONENT = 203;
	int RunExpr = 204;
	int GetExpr = 205;
	int AssignExpr = 206;
	int CallExpr = 207;
	int DefineExpr = 208;
	int EscapeExpr = 209;
	int HideExpr = 210;
	int IfExpr = 211;
	int ForExpr = 212;
	int LiteralExpr = 213;
	int MatchBindExpr = 214;
	int NounExpr = 215;
	int ObjectExpr = 216;
	int QuasiLiteralExpr = 217;
	int QuasiPatternExpr = 218;
	int MetaStateExpr = 219;
	int MetaContextExpr = 220;
	int SeqExpr = 221;
	int SlotExpr = 222;
	int MetaExpr = 223;
	int CatchExpr = 224;
	int FinallyExpr = 225;
	int ReturnExpr = 226;
	int ContinueExpr = 227;
	int BreakExpr = 228;
	int WhileExpr = 229;
	int SwitchExpr = 230;
	int TryExpr = 231;
	int MapPattern = 232;
	int TupleExpr = 233;
	int BindPattern = 234;
	int SendExpr = 235;
	int FinalPattern = 236;
	int VarPattern = 237;
	int SlotPattern = 238;
	int ListPattern = 239;
	int CdrPattern = 240;
	int IgnorePattern = 241;
	int SuchThatPattern = 242;
	int QuasiLiteralPattern = 243;
	int QuasiPatternPattern = 244;
	int EScript = 245;
	int EMethod = 246;
	int EMatcher = 247;
	int XOR = 248;
	// "%" = 249
	int LiteralString = 250;
	// "%%" = 251
	// "::" = 252
	// "${" = 253
	int LiteralInteger = 254;
	// "$" = 255
	// "$$" = 256
	int MapsTo = 257;
	int BIND = 258;
	int VAR = 259;
}
